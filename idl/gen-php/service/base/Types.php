<?php
namespace service\base;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class appId {
  const ANDROID = 1;
  const IOS = 2;
  static public $__names = array(
    1 => 'ANDROID',
    2 => 'IOS',
  );
}

class baseReqHeader {
  static $_TSPEC;

  public $skey = null;
  public $deviceId = null;
  public $wechatOpenId = null;
  public $contentHash = null;
  public $srcId = null;
  public $subSrc = null;
  public $wechat2OpenId = null;
  public $wechatUnionId = null;
  public $userIp = null;
  public $idfa = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'skey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'deviceId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'wechatOpenId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'contentHash',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'srcId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'subSrc',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'wechat2OpenId',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'wechatUnionId',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'userIp',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'idfa',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['skey'])) {
        $this->skey = $vals['skey'];
      }
      if (isset($vals['deviceId'])) {
        $this->deviceId = $vals['deviceId'];
      }
      if (isset($vals['wechatOpenId'])) {
        $this->wechatOpenId = $vals['wechatOpenId'];
      }
      if (isset($vals['contentHash'])) {
        $this->contentHash = $vals['contentHash'];
      }
      if (isset($vals['srcId'])) {
        $this->srcId = $vals['srcId'];
      }
      if (isset($vals['subSrc'])) {
        $this->subSrc = $vals['subSrc'];
      }
      if (isset($vals['wechat2OpenId'])) {
        $this->wechat2OpenId = $vals['wechat2OpenId'];
      }
      if (isset($vals['wechatUnionId'])) {
        $this->wechatUnionId = $vals['wechatUnionId'];
      }
      if (isset($vals['userIp'])) {
        $this->userIp = $vals['userIp'];
      }
      if (isset($vals['idfa'])) {
        $this->idfa = $vals['idfa'];
      }
    }
  }

  public function getName() {
    return 'baseReqHeader';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->skey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wechatOpenId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->srcId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subSrc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wechat2OpenId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wechatUnionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idfa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('baseReqHeader');
    if ($this->skey !== null) {
      $xfer += $output->writeFieldBegin('skey', TType::STRING, 1);
      $xfer += $output->writeString($this->skey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceId !== null) {
      $xfer += $output->writeFieldBegin('deviceId', TType::STRING, 2);
      $xfer += $output->writeString($this->deviceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wechatOpenId !== null) {
      $xfer += $output->writeFieldBegin('wechatOpenId', TType::STRING, 3);
      $xfer += $output->writeString($this->wechatOpenId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentHash !== null) {
      $xfer += $output->writeFieldBegin('contentHash', TType::STRING, 4);
      $xfer += $output->writeString($this->contentHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcId !== null) {
      $xfer += $output->writeFieldBegin('srcId', TType::I32, 5);
      $xfer += $output->writeI32($this->srcId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subSrc !== null) {
      $xfer += $output->writeFieldBegin('subSrc', TType::STRING, 6);
      $xfer += $output->writeString($this->subSrc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wechat2OpenId !== null) {
      $xfer += $output->writeFieldBegin('wechat2OpenId', TType::STRING, 7);
      $xfer += $output->writeString($this->wechat2OpenId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wechatUnionId !== null) {
      $xfer += $output->writeFieldBegin('wechatUnionId', TType::STRING, 8);
      $xfer += $output->writeString($this->wechatUnionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIp !== null) {
      $xfer += $output->writeFieldBegin('userIp', TType::STRING, 9);
      $xfer += $output->writeString($this->userIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idfa !== null) {
      $xfer += $output->writeFieldBegin('idfa', TType::STRING, 10);
      $xfer += $output->writeString($this->idfa);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class cookie {
  static $_TSPEC;

  public $name = null;
  public $value = null;
  public $domain = null;
  public $path = null;
  public $expires = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'domain',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'expires',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['domain'])) {
        $this->domain = $vals['domain'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['expires'])) {
        $this->expires = $vals['expires'];
      }
    }
  }

  public function getName() {
    return 'cookie';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->domain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expires);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('cookie');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain !== null) {
      $xfer += $output->writeFieldBegin('domain', TType::STRING, 3);
      $xfer += $output->writeString($this->domain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 4);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expires !== null) {
      $xfer += $output->writeFieldBegin('expires', TType::I32, 5);
      $xfer += $output->writeI32($this->expires);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class baseRespHeader {
  static $_TSPEC;

  public $time = null;
  public $skey = null;
  public $uid = null;
  public $contentHash = null;
  public $cookie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'skey',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'contentHash',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cookie',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\service\base\cookie',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['skey'])) {
        $this->skey = $vals['skey'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['contentHash'])) {
        $this->contentHash = $vals['contentHash'];
      }
      if (isset($vals['cookie'])) {
        $this->cookie = $vals['cookie'];
      }
    }
  }

  public function getName() {
    return 'baseRespHeader';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->skey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentHash);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->cookie = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \service\base\cookie();
              $xfer += $elem5->read($input);
              $this->cookie []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('baseRespHeader');
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 1);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->skey !== null) {
      $xfer += $output->writeFieldBegin('skey', TType::STRING, 2);
      $xfer += $output->writeString($this->skey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentHash !== null) {
      $xfer += $output->writeFieldBegin('contentHash', TType::STRING, 4);
      $xfer += $output->writeString($this->contentHash);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cookie !== null) {
      if (!is_array($this->cookie)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cookie', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->cookie));
        {
          foreach ($this->cookie as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class baseException extends TException {
  static $_TSPEC;

  public $header = null;
  public $retCode = null;
  public $retMsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'header',
          'type' => TType::STRUCT,
          'class' => '\service\base\baseRespHeader',
          ),
        2 => array(
          'var' => 'retCode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'retMsg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['header'])) {
        $this->header = $vals['header'];
      }
      if (isset($vals['retCode'])) {
        $this->retCode = $vals['retCode'];
      }
      if (isset($vals['retMsg'])) {
        $this->retMsg = $vals['retMsg'];
      }
    }
  }

  public function getName() {
    return 'baseException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->header = new \service\base\baseRespHeader();
            $xfer += $this->header->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('baseException');
    if ($this->header !== null) {
      if (!is_object($this->header)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('header', TType::STRUCT, 1);
      $xfer += $this->header->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retCode !== null) {
      $xfer += $output->writeFieldBegin('retCode', TType::I32, 2);
      $xfer += $output->writeI32($this->retCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retMsg !== null) {
      $xfer += $output->writeFieldBegin('retMsg', TType::STRING, 3);
      $xfer += $output->writeString($this->retMsg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



final class BaseConstants {
}


